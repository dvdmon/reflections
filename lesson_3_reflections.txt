When would you want to use a remote repository rather than keeping all your work local?

If you are colaborating with others and want your changes to be immediately visible, and/or when 
your current local repository location is unreliable (not able to connect to the internet, borrowed for a short period of time, etc.)


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If you have a public repository, you may want to commit individual features within a new featureset, or one small bug at a time and then have a new version of your project which addresses a number of bugs and features at once.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Clones are exact copies of a given set of code, inluding all branches up to the latest commit.  Branches can be seen as different versions of a set of code, whereas forks are a kind of clone but specific to github - it clones a given repository and sets it up for a new user to be the keeper of that repository and can manage future changes, but while still having a link crediting the origin of the initial repository owner.  You would use forks, thus, when you want to manage your own version of a repository and potentially get your own collaborators but still make sure you are giving credit to the original owner.  Branches are simply ways of creating different versions of a given repository, but can also be used when wanting to work on a bug or feature set and keeping that set of changes separate from the main or master branch until they are done, when they can be merged back in.  Cloing is done when you want to initially create a copy of a given repository from a remote location to your local device.


What is the benefit of having a copy of the last known state of the remote stored locally?

This will make it easier to compare your code to the repository version (before fetched/pulled) and allow you to see what that state was even if you are offline.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without any version control system, you would have to email your changes to the other people in the team each time you made a change so that they could incorporate it into theirs.  If they found an issue they would have to alert all the team members to not include it and then you would have to fix the issue and resubmit.  This would make things a lot more cumbersome because every team member would have to manually merge in your changes and each time someone missed a conflict or something broke, each person would independently be trying to figure out what went wrong until the first person posted about it.  The only thing that would be easier would be that you would just need to edit and save and then email your change to everyone, so the person making the change would have it easier, but everyone else would have it harder.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When you are colaborating with others, making a separate branch can be helpful in keeping your changes distinct and separate from other changes that other colaborators may be doing until they all can review your changes and determine whether they will work well with the changes they have been making and not conflict too much, or that they don't have errors before they are encorporated into the Master where they would need to be the fixed as an additional task.
