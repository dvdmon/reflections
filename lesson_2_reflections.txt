What happens when you initialize a repository? Why do you need to do it?

Initializing a repository sets it up with git meta data so that it can track changes to the files that are included in it.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a transitionary "place" that you put files that you intent to commit.  Before you add files to it, it will contain whatever was in the last commit for a given file in the repository.  If you want to make a change, you would make a change to a file, which would chang it "in the working directory."  Then you would have to add it to the staging area with the git add command.  Finally, a commit will add whatever files have been added to that staging area to a new commit in the repository.  While this means multiple steps, it also means that you have more clarity of what has changed and what is being added before committing anything.


How can you use the staging area to make sure you have one commit per logical change?

if you do a git diff --staged you can see what files have changed from the staging area to the last commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are good for when you think their might be a reason to have more than one version of that code, either for different languages, different devices, or other things that conditions that would require you to add a lot more code, thus making the memory and storage requirements larger.


How do the diagrams help you visualize the branch structure?

By visualizing branches, it helps you to understand how different branches relate to each other - what their most recent common ancestor is, and whether a given commit is reachable from another.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines the code in each to make one file (or set of files) that combine the changes in the two branches.  The diagram visualizes how the two chains of changes merge into a single all-encompassing version set.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging can save a lot of time by merging sections of code that are obvious automatically yet involving the user in sections that cannot be done, but pinpointing those sections rather than forcing the user to peruse their entire file or files to find the pertinant changes.

